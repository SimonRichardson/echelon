// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Codes struct {
	_tab flatbuffers.Table
}

func GetRootAsCodes(buf []byte, offset flatbuffers.UOffsetT) *Codes {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Codes{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Codes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Codes) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Codes) BarcodeType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Codes) BarcodeOrigin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Codes) BarcodeSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Codes) Qrcode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CodesStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CodesAddBarcodeType(builder *flatbuffers.Builder, barcodeType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(barcodeType), 0)
}
func CodesAddBarcodeOrigin(builder *flatbuffers.Builder, barcodeOrigin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(barcodeOrigin), 0)
}
func CodesAddBarcodeSource(builder *flatbuffers.Builder, barcodeSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(barcodeSource), 0)
}
func CodesAddQrcode(builder *flatbuffers.Builder, qrcode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(qrcode), 0)
}
func CodesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
