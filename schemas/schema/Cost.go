// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cost struct {
	_tab flatbuffers.Table
}

func GetRootAsCost(buf []byte, offset flatbuffers.UOffsetT) *Cost {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cost{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Cost) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cost) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cost) Currency() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cost) Price() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Cost) MutatePrice(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func CostStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CostAddCurrency(builder *flatbuffers.Builder, currency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(currency), 0)
}
func CostAddPrice(builder *flatbuffers.Builder, price uint64) {
	builder.PrependUint64Slot(1, price, 0)
}
func CostEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
