// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KeyFieldScoreSizeExpiry struct {
	_tab flatbuffers.Table
}

func GetRootAsKeyFieldScoreSizeExpiry(buf []byte, offset flatbuffers.UOffsetT) *KeyFieldScoreSizeExpiry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KeyFieldScoreSizeExpiry{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KeyFieldScoreSizeExpiry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KeyFieldScoreSizeExpiry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KeyFieldScoreSizeExpiry) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KeyFieldScoreSizeExpiry) Field() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KeyFieldScoreSizeExpiry) Score() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *KeyFieldScoreSizeExpiry) MutateScore(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *KeyFieldScoreSizeExpiry) Size() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KeyFieldScoreSizeExpiry) MutateSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *KeyFieldScoreSizeExpiry) Expiry() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KeyFieldScoreSizeExpiry) MutateExpiry(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func KeyFieldScoreSizeExpiryStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KeyFieldScoreSizeExpiryAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func KeyFieldScoreSizeExpiryAddField(builder *flatbuffers.Builder, field flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(field), 0)
}
func KeyFieldScoreSizeExpiryAddScore(builder *flatbuffers.Builder, score float64) {
	builder.PrependFloat64Slot(2, score, 0.0)
}
func KeyFieldScoreSizeExpiryAddSize(builder *flatbuffers.Builder, size int64) {
	builder.PrependInt64Slot(3, size, 0)
}
func KeyFieldScoreSizeExpiryAddExpiry(builder *flatbuffers.Builder, expiry int64) {
	builder.PrependInt64Slot(4, expiry, 0)
}
func KeyFieldScoreSizeExpiryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
