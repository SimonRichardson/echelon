// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Location struct {
	_tab flatbuffers.Table
}

func GetRootAsLocation(buf []byte, offset flatbuffers.UOffsetT) *Location {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Location{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Location) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Location) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Location) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Location) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *Location) Lng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Location) MutateLng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *Location) Accuracy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Location) MutateAccuracy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func LocationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LocationAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(0, lat, 0.0)
}
func LocationAddLng(builder *flatbuffers.Builder, lng float64) {
	builder.PrependFloat64Slot(1, lng, 0.0)
}
func LocationAddAccuracy(builder *flatbuffers.Builder, accuracy float64) {
	builder.PrependFloat64Slot(2, accuracy, 0.0)
}
func LocationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
