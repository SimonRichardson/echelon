// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OKInt struct {
	_tab flatbuffers.Table
}

func GetRootAsOKInt(buf []byte, offset flatbuffers.UOffsetT) *OKInt {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OKInt{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *OKInt) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OKInt) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OKInt) Duration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OKInt) MutateDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *OKInt) Records() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OKInt) MutateRecords(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func OKIntStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OKIntAddDuration(builder *flatbuffers.Builder, duration int64) {
	builder.PrependInt64Slot(0, duration, 0)
}
func OKIntAddRecords(builder *flatbuffers.Builder, records int64) {
	builder.PrependInt64Slot(1, records, 0)
}
func OKIntEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
