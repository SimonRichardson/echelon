// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PutRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsPutRecord(buf []byte, offset flatbuffers.UOffsetT) *PutRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PutRecord{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PutRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PutRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PutRecord) Typ() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 3
}

func (rcv *PutRecord) MutateTyp(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *PutRecord) Id(obj *Id) *Id {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Id)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PutRecord) OwnerId(obj *Id) *Id {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Id)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PutRecord) Updated() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PutRecord) MutateUpdated(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *PutRecord) Purchased() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PutRecord) MutatePurchased(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *PutRecord) EventCost(obj *Cost) *Cost {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cost)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PutRecord) EventDates(obj *Dates) *Dates {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Dates)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PutRecord) TransactionId(obj *Id) *Id {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Id)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PutRecord) Codes(obj *Codes) *Codes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Codes)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PutRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func PutRecordAddTyp(builder *flatbuffers.Builder, typ int8) {
	builder.PrependInt8Slot(0, typ, 3)
}
func PutRecordAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(id), 0)
}
func PutRecordAddOwnerId(builder *flatbuffers.Builder, ownerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ownerId), 0)
}
func PutRecordAddUpdated(builder *flatbuffers.Builder, updated uint64) {
	builder.PrependUint64Slot(3, updated, 0)
}
func PutRecordAddPurchased(builder *flatbuffers.Builder, purchased uint64) {
	builder.PrependUint64Slot(4, purchased, 0)
}
func PutRecordAddEventCost(builder *flatbuffers.Builder, eventCost flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(eventCost), 0)
}
func PutRecordAddEventDates(builder *flatbuffers.Builder, eventDates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(eventDates), 0)
}
func PutRecordAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(transactionId), 0)
}
func PutRecordAddCodes(builder *flatbuffers.Builder, codes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(codes), 0)
}
func PutRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
