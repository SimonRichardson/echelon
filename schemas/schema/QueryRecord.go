// automatically generated by the FlatBuffers compiler, do not modify

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QueryRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsQueryRecord(buf []byte, offset flatbuffers.UOffsetT) *QueryRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueryRecord{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QueryRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueryRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QueryRecord) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *QueryRecord) Field() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *QueryRecord) Record() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func QueryRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func QueryRecordAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func QueryRecordAddField(builder *flatbuffers.Builder, field flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(field), 0)
}
func QueryRecordAddRecord(builder *flatbuffers.Builder, record flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(record), 0)
}
func QueryRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
